{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:09.216Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:39.130Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:39.175Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:39.177Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:39.193Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:39.195Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:58.095Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:58.137Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:58.140Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:58.171Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:27:58.173Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:28:02.287Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:28:02.315Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:28:02.317Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:28:02.322Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:28:02.332Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"":"sdfghjkl;'"}],"createdAt":"2023-11-19T17:22:20.069Z","dName":"","footer":[{"fgdsdfgthfds":"sdfghjkl","hfbgdfvdc":"werty"}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":";poiugf","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"9654","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-08","permission":"Supervisor"}],"masterName":"xfcghjikol;","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:22:20.069Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:28:46.772Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"":"sdfghjkl;'"}],"createdAt":"2023-11-19T17:22:20.069Z","dName":"","footer":[{"fgdsdfgthfds":"sdfghjkl","hfbgdfvdc":"werty"}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":";poiugf","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"9654","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-08","permission":"Supervisor"}],"masterName":"xfcghjikol;","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:22:20.069Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:28:46.781Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:29:30.203Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:30:31.891Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:30:31.929Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:30:31.931Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:30:31.935Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:30:31.945Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"":"sdfghjkl;'"}],"createdAt":"2023-11-19T17:22:20.069Z","dName":"","footer":[{"fgdsdfgthfds":"sdfghjkl","hfbgdfvdc":"werty"}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":";poiugf","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"9654","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-08","permission":"Supervisor"}],"masterName":"xfcghjikol;","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:22:20.069Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:32:42.601Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"":"sdfghjkl;'"}],"createdAt":"2023-11-19T17:22:20.069Z","dName":"","footer":[{"fgdsdfgthfds":"sdfghjkl","hfbgdfvdc":"werty"}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":";poiugf","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"9654","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-08","permission":"Supervisor"}],"masterName":"xfcghjikol;","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:22:20.069Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:32:42.607Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:00.289Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:35.612Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:56.618Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:56.655Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:56.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:56.658Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:33:56.669Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:36:00.408Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:36:31.356Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:36:31.369Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:36:51.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:12.571Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:39:37.124Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:37.159Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:47.277Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:47.314Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:47.316Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:47.321Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:39:47.328Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:41:57.242Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:41:57.311Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:41:57.314Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:41:57.316Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:41:57.389Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:19.793Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:19.842Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:19.844Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:19.846Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:19.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:47.958Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:48.065Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:48.068Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:48.070Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:43:48.148Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:45:20.210Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:45:20.270Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:45:20.273Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:45:20.275Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:45:20.321Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:00.585Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:00.639Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:00.642Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:00.648Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:00.706Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:23.580Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:23.694Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:23.696Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:23.699Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:46:23.883Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:18.243Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:50:49.513Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:49.548Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:53.051Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:53.089Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:53.090Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:53.093Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:50:53.105Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:36.965Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:37.125Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:37.129Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:37.130Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:37.255Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:49.904Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:49.969Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:49.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:49.974Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:51:50.017Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:53:03.839Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:53:58.584Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:54:29.055Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:29.085Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:32.467Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:32.505Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:32.508Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:32.510Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:32.517Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:54.456Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:54.495Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:54.501Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:54.505Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:54:54.519Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:55:03.239Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:55:03.278Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:55:03.280Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:55:03.283Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:55:03.291Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:55:37.725Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:55:37.729Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:55:41.247Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:55:41.257Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:55:51.796Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T04:55:51.822Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:04.637Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:04.676Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:04.678Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:04.681Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:04.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:56:13.341Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T04:57:06.976Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:07.010Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:11.551Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:11.591Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:11.593Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:11.595Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:11.609Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:57:59.048Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:24.762Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:24.804Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:24.806Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:24.809Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:24.820Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T04:58:39.349Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:02:58.660Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:04:54.504Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:47.478Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:47.532Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:47.536Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:47.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:47.570Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:05:55.497Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:05.392Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:22.364Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:22.403Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:22.405Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:22.409Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:22.420Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:06:50.483Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:07:29.734Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:29.789Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:32.092Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:32.145Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:32.148Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:32.149Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:32.165Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:40.358Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:40.404Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:40.407Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:40.409Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:07:40.419Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:08:41.868Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:08:41.914Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:08:41.918Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:08:41.919Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:08:41.935Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:09:11.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:09:11.672Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:09:11.674Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:09:11.679Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:09:11.773Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:10:08.103Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:10:08.244Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:10:08.247Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:10:08.251Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:10:08.347Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:12:04.435Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:12:04.547Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:12:04.549Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:12:04.555Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:12:04.649Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:38.114Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:38.184Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:38.191Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:38.193Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:38.240Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:16:39.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:17:23.662Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:17:23.697Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:21:43.292Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:21:43.299Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:21:43.310Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:28:09.967Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:28:39.681Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:28:39.715Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:31:37.796Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:31:52.747Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"Template0017","approval":[],"column":[{"":"1","A1":"1","A2":"2","C1":"1","D1":"1","D2":"2","D3":"3"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-17T07:17:29.793Z","dName":"","footer":[{"Approved By":"admin","Level of Approval":"level3","Quality Assurance":"1","Signature":"admin"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"Master017","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T07:20:22.666Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:02.929Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"Template0017","approval":[],"column":[{"":"1","A1":"1","A2":"2","C1":"1","D1":"1","D2":"2","D3":"3"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-17T07:17:29.793Z","dName":"","footer":[{"Approved By":"admin","Level of Approval":"level3","Quality Assurance":"1","Signature":"admin"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"Master017","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T07:20:22.666Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:02.944Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:32:12.783Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P9","Tempname":"Template01","approval":[],"column":[{"":"ghjiko","A1":"fcghj","A2":"hjkl","A3":"gbhjkl","C1":"qhj","C2":"khjik","D1":"hjk"}],"createdAt":"2023-11-17T10:03:43.718Z","dName":"","footer":[{"Approved by":"vgbhnjkl","Level of Approval":"vbhnjmk","Quality Assurance":"vgbhjk","Signature":"bhnjm"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"MasterValue00001","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T10:03:43.718Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:24.620Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P9","Tempname":"Template01","approval":[],"column":[{"":"ghjiko","A1":"fcghj","A2":"hjkl","A3":"gbhjkl","C1":"qhj","C2":"khjik","D1":"hjk"}],"createdAt":"2023-11-17T10:03:43.718Z","dName":"","footer":[{"Approved by":"vgbhnjkl","Level of Approval":"vbhnjmk","Quality Assurance":"vgbhjk","Signature":"bhnjm"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"MasterValue00001","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T10:03:43.718Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:24.639Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:33.950Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:33.960Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"Template01","approval":[],"column":[{"":"fgh","A1":"q","A2":"sfdgf","A3":"ghj","C1":"fdgh","C2":"dfgh","D1":"dfgh"}],"createdAt":"2023-11-17T10:01:01.587Z","dName":"","footer":[{"Approved by":"dsfg","Level of Approval":"fgh","Quality Assurance":"asdfg","Signature":"dfghj"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"MasterValue001","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T10:01:01.587Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:43.409Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"Template01","approval":[],"column":[{"":"fgh","A1":"q","A2":"sfdgf","A3":"ghj","C1":"fdgh","C2":"dfgh","D1":"dfgh"}],"createdAt":"2023-11-17T10:01:01.587Z","dName":"","footer":[{"Approved by":"dsfg","Level of Approval":"fgh","Quality Assurance":"asdfg","Signature":"dfghj"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Content(Body)","masterName":"MasterValue001","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T10:01:01.587Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:32:43.419Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:35:18.835Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:35:18.855Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:35:30.524Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:35:38.237Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:35:38.263Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:36:25.058Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:36:25.095Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:37:14.125Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:37:14.162Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:53:51.400Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"template20","approval":[],"column":[{"":"1"},{"":"2"}],"createdAt":"2023-11-17T11:16:10.681Z","dName":"","footer":[{"FooterData1":"1","FooterData2":"2","FooterData3":"3"},{"FooterData1":"2"},{"FooterData1":"3"}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"Master20","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-17T11:16:10.681Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:53:51.457Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:04.662Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:19.046Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:19.097Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:19.100Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:19.103Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:54:19.119Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:55:15.311Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:56:36.582Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:36.623Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:38.836Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:38.880Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:38.883Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:38.886Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T05:56:38.898Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:57:07.330Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T05:57:07.332Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:57:10.363Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:57:10.370Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:58:36.192Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:58:36.226Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:58:59.143Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T05:58:59.203Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:02:07.565Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:02:07.595Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:04:38.133Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:04:38.172Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:04:52.271Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:04:52.313Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:05:28.498Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:05:28.544Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:05:36.355Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:05:36.400Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:07:11.090Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:07:11.132Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:09:04.691Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:09:04.738Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:09:48.773Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:09:48.806Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:10:13.534Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:10:13.577Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:10:40.061Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:10:40.120Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:11:02.770Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:11:02.837Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:11:47.368Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:11:47.394Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:12:30.244Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:12:30.312Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:13:51.742Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:13:51.793Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:14:03.082Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:14:03.135Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:08.556Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:08.610Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:32.112Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:32.123Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:39.789Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:15:39.837Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:16:05.096Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:16:05.134Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:21:14.864Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:21:14.988Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:21:59.941Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:21:59.980Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:22:10.106Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:22:10.138Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:22:15.301Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:22:15.333Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:23:58.207Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:23:58.230Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:25:30.798Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:25:30.841Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:25:52.415Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:25:52.448Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:26:27.840Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:26:27.846Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:26:56.379Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:26:56.411Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:27:57.334Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:27:57.376Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:29:16.755Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:29:16.819Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:32:20.043Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:32:20.103Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:32:42.326Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:32:42.360Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:33:20.168Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:33:20.206Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:34:17.857Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:34:17.895Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:34:53.191Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:34:53.230Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:35:17.829Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:35:17.866Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:35:56.706Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:35:56.745Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:37:01.476Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:37:01.499Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:37:05.031Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:37:05.094Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:18.566Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T06:37:45.182Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:45.218Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:50.929Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:50.971Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:50.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:50.975Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:37:50.985Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T06:38:17.298Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T06:38:17.304Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:38:21.484Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:38:21.498Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:38:30.322Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:38:30.340Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:39:10.413Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:38:17.301Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gdffgf","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"65543","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"hjdggshdvsydtxghabvsdxghasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:38:17.301Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:39:10.478Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:32.686Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:39.241Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:39.294Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:39.297Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:39.298Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:39:39.313Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T06:40:04.286Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T06:40:04.295Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:08.535Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:08.552Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:14.545Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:14.592Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:41.756Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:41.797Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:56.450Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:40:56.465Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:06.186Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:06.208Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:10.665Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:10.691Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:41:35.680Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:40.974Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:41:40.988Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:42:15.442Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:42:15.486Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:42:23.356Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:42:23.362Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:07.238Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:07.271Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-20T06:43:17.351Z"}
{"level":"debug","message":"{\n  _id: new ObjectId(\"6540a5298a5c8eda9ad04e13\"),\n  userName: 'SUPERADMIN',\n  __v: 0,\n  email: 'administrator@wimerasys.com',\n  password: '0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52',\n  userId: '1'\n}userData","timestamp":"2023-11-20T06:43:17.358Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T06:43:17.358Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T06:43:17.441Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:24.913Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:24.924Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:27.849Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:27.870Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:33.579Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:33.586Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:36.253Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:43:36.309Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:14.638Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:14.680Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:15.920Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:15.955Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:18.149Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:44:18.157Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:13.528Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:13.602Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:14.484Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:14.521Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:22.027Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:22.038Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:57.576Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:57.637Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:57.759Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:45:57.841Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:05.831Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:05.859Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:06.574Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:06.689Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:38.357Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:38.441Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:38.473Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:38.537Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:53.472Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:53.540Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:59.001Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:46:59.014Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:04.683Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:04.733Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:08.518Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:08.546Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:43.241Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:43.298Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:44.098Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:48:44.186Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:50:30.607Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:50:30.659Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:50:31.563Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:50:31.619Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:49.960Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:50.007Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:50.976Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:51.024Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:57.204Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:52:57.217Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:00.785Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:00.829Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:50.597Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:50.652Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:51.472Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:51.553Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:55.321Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:55.350Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:59.570Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:53:59.588Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:54:04.853Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T06:54:04.877Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:50.054Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:50.089Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:51.224Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"sjdfhusdgfbguygf","approval":[],"column":[{"aewrwerwer":"HGFFHF","ewfraerfyrtgr":"544"}],"createdAt":"2023-11-20T04:55:37.735Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ERGERGDFGVDFV","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T04:55:37.735Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:51.263Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:56.467Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:06:56.499Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:17.894Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:17.952Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:18.309Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:18.351Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:23.534Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:23.600Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:24.634Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:07:24.716Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:07:27.426Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:11:15.708Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:17:21.701Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:17:21.758Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:17:26.909Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:17:26.919Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:17:33.027Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:17:33.039Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:18:27.149Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:18:37.860Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:18:37.913Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:18:44.879Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:18:44.985Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:19:35.440Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:19:35.514Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:19:59.449Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:19:59.490Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:10.963Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:10.994Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:18.533Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:18.581Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:39.723Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:39.763Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:44.647Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:20:44.696Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:00.734Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:00.824Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:14.936Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:14.978Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:35.297Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:21:35.336Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:22:08.094Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:22:08.158Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:22:49.642Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:22:49.695Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:22.940Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"gbhfghfhghfgh","approval":[],"column":[],"createdAt":"2023-11-20T06:40:04.289Z","dName":"Product","footer":[],"machineName":"","mainData":[{"mName":"ghfghbfgh","mtype":"text","mvalue":"gbfgbfgb","permission":"SUPERADMIN"},{"mName":"fhbhfghfgh","mtype":"number","mvalue":"765","permission":"SUPERADMIN"},{"mName":"fhfgh","mtype":"date","mvalue":"2023-11-01","permission":"Supervisor"}],"masterName":"lkijuhygtrfdsa","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T06:40:04.289Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:22.982Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:23:33.749Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:23:33.755Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:23:34.795Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:23:34.797Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:37.262Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:37.275Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:45.665Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"mjuhuhjujhu","approval":[],"column":[{"gfrdes":"KJHGFD","hgrfedwsa":"XSCDFGHJKL","sefdffdrg":"aSDFGH"},{"sefdffdrg":"ASWEFGTHJUKL;"}],"createdAt":"2023-11-19T17:29:10.732Z","dName":"","footer":[{"fgdsdfgthfds":"cdvfbgnm,","hfbgdfvdc":"sdfvgbhhmjk,."}],"machineName":"","mainData":[{"mName":"dfghjk","mtype":"text","mvalue":"KJHGFD","permission":"Admin"},{"mName":"lkjhgfdfghjk","mtype":"number","mvalue":"09875","permission":"Admin"},{"mName":"poiuytrdf","mtype":"date","mvalue":"2023-11-02","permission":"Supervisor"}],"masterName":"LKIUYTRES","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-19T17:29:10.732Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:23:45.672Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:23:48.564Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:24:24.001Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:24.031Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:39.754Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:39.796Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:39.799Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:39.802Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:39.815Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:24:53.277Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:25:16.463Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:16.508Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:18.598Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:18.639Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:18.642Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:18.645Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:25:18.661Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:26:57.383Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:26:59.907Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:26:59.910Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:26:59.918Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:27:17.697Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:28:37.406Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:29:19.328Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:19.374Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:21.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:21.961Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:21.963Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:21.965Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:21.976Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:29:34.957Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:30:00.961Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:01.014Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:05.585Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:05.625Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:05.628Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:05.630Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:05.639Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:30:27.896Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:30:31.222Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:33:52.853Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:33:52.893Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:33:52.898Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:33:52.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:33:52.925Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:35:26.714Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:37:04.383Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:04.449Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:07.959Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:08.012Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:08.016Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:08.018Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:37:08.031Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:37:42.925Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:37:42.927Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:37:46.365Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:37:46.387Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:38:07.133Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:38:07.179Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:30.279Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:30.341Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:30.344Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:30.401Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:30.404Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:40:45.282Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:40:45.294Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:40:54.151Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:42:22.880Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T07:42:22.899Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:44:57.788Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:45:44.698Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:56:05.860Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:05.914Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:23.891Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:23.940Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:23.942Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:23.946Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:56:23.959Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:08.688Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:59:12.772Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:12.776Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:12.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T07:59:36.834Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:36.888Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:39.150Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:39.193Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:39.195Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:39.198Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T07:59:39.209Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:01:31.678Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:01:31.779Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:01:31.782Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:01:31.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:01:31.847Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:02:12.227Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:02:12.288Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:02:12.291Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:02:12.295Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:02:12.350Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:39.049Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:39.130Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:39.133Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:39.135Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:39.217Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:58.056Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:58.153Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:58.160Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:58.162Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:03:58.265Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:04:18.778Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:04:18.847Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:04:18.849Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:04:18.851Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:04:18.996Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:31.954Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T08:06:52.100Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:52.149Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:54.852Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:54.896Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:54.898Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:54.900Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:06:54.913Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:07:22.849Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T08:07:26.380Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:07:26.382Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:07:26.393Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T08:09:11.994Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:12.030Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:16.045Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:16.095Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:16.097Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:16.099Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:16.122Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:54.573Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:54.638Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:54.663Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:54.671Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:09:54.727Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:10:51.179Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:10:51.325Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:10:51.328Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:10:51.336Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:10:51.388Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:18.246Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T08:11:42.167Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:42.236Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:46.760Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:46.819Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:46.822Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:46.824Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:11:46.837Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:31.549Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:31.626Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:31.629Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:31.631Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:31.721Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T08:15:47.783Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:23:34.638Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:23:34.673Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:23:34.675Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:23:34.676Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:23:34.693Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:24:19.361Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:24:56.426Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:24:56.460Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:25:00.611Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:25:00.657Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:25:00.661Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:25:00.663Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:25:00.678Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:26:40.302Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:26:40.364Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:26:40.366Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:26:40.369Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:26:40.458Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:06.708Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:06.770Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:06.777Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:06.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:06.841Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:15.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:27:38.436Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:28:12.364Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:28:12.414Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:28:57.573Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:29:29.818Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:29.855Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:40.559Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:40.607Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:40.610Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:40.612Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:29:40.638Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:29:59.644Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:29:59.646Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:30:07.526Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:30:07.553Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:30:39.443Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:30:39.458Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:30:56.003Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:30:59.486Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:31:08.269Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:31:08.294Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:32:50.573Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:32:50.605Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:34:52.071Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:34:52.121Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:34:58.060Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:34:58.092Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:35:10.445Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:35:10.459Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:35:56.832Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:35:56.862Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:36:12.806Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:36:12.839Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:36:17.614Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:36:17.633Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:36:30.327Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:38:40.082Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:38:40.126Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:38:40.128Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:38:40.129Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:38:40.147Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:39:00.582Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T09:39:00.589Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:39:04.406Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:39:04.428Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:40:40.869Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:40:40.917Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:40:46.642Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:40:46.725Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:41:32.906Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:41:32.964Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:41:59.598Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:41:59.650Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:42:51.243Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:42:51.293Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:43:15.776Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:43:15.822Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:44:55.788Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:44:55.832Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:44:57.605Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:02.278Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:02.289Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:45:20.558Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:23.682Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:23.683Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:26.206Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:45:36.097Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:45:41.341Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:45:46.023Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdfhgjklkjngfdsz","approval":[],"column":[],"createdAt":"2023-11-18T07:25:46.924Z","dName":"","footer":[{"sadegthyukl":"sdfghj"},{}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"jhgfdsdfghnjmkjhgfdsx","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"asdfgthyjuk":"aswefrgthjmk,"},{}],"subMetdata":[],"updatedAt":"2023-11-18T07:25:46.924Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:48.543Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdfhgjklkjngfdsz","approval":[],"column":[],"createdAt":"2023-11-18T07:25:46.924Z","dName":"","footer":[{"sadegthyukl":"sdfghj"},{}],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"jhgfdsdfghnjmkjhgfdsx","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"asdfgthyjuk":"aswefrgthjmk,"},{}],"subMetdata":[],"updatedAt":"2023-11-18T07:25:46.924Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:45:49.828Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:46:06.633Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:46:06.644Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T09:46:13.767Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:46:25.268Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:46:26.445Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:50:00.168Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T09:57:45.602Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:01:11.671Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:06:10.522Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:06:30.393Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:06:39.020Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:06:40.201Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:07:23.060Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:09:26.419Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:09:46.836Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:10:02.774Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:10:08.408Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:10:09.619Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:10:43.993Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:11:00.328Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:11:02.902Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:11:02.904Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:11:04.340Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:11:54.488Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:12:31.466Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:14:34.918Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:14:39.588Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:14:40.521Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:14:49.225Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:15:18.364Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:15:56.496Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:16:14.614Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:16:38.842Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:17:39.837Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:17:43.801Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:17:45.542Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:17:46.350Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:18:15.796Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:18:35.239Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:18:45.791Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:18:46.934Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:18:58.019Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:19:19.388Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:19:24.155Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:19:25.268Z"}
{"level":"debug","message":{"Tempname":"headerDataCheck","column":[],"footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subHeader":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-20T10:19:29.280Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-20T10:19:29.282Z"}
{"kind":"string","message":"Cast to string failed for value \"[]\" (type Array) at path \"subHeader\"","name":"CastError","path":"subHeader","reason":null,"stringValue":"\"[]\"","value":[],"valueType":"Array"}
{"kind":"string","message":"Cast to string failed for value \"[]\" (type Array) at path \"subHeader\"","name":"CastError","path":"subHeader","reason":null,"stringValue":"\"[]\"","value":[],"valueType":"Array"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:19:29.338Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:22:04.019Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"headerDataCheck","approval":[],"column":[],"createdAt":"2023-11-20T05:57:07.338Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T05:57:07.338Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:22:09.869Z"}
{"level":"debug","message":{"Tempname":"headerDataCheck","column":[],"footer":[],"machineName":"","mainData":[{"mName":"sfcfsdfsf","mtype":"text","mvalue":"rthfhjghyjghjk","permission":"Admin"},{"mName":"ddddasda","mtype":"text","mvalue":"trhrfyjfghfgh","permission":"Admin"},{"mName":"dastujryhyhtyh","mtype":"number","mvalue":"4545","permission":"Operator"},{"mName":"rhrthsrthy","mtype":"date","mvalue":"2023-11-01","permission":"SUPERADMIN"}],"masterName":"mklijnry87uhjker78gyuierhj7yruhjbfrdf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-20T10:22:11.777Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-20T10:22:11.778Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:28:50.057Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T09:39:00.585Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"fghdgdgdgfggfgfggfggggggg","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:39:00.585Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:28:50.063Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T10:28:56.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:28:56.695Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:28:58.107Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:28:58.114Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:29:08.398Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:29:10.575Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"createdAt":"2023-11-20T09:29:59.653Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T09:29:59.653Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:29:11.810Z"}
{"level":"debug","message":{"Tempname":"asdadsfcsfdretgr5grghrthtyj","column":[{"bhry6trfg":"seetgfhjk","ersfdtegrf":"3456789","ythrthryh":"sdfghnj"}],"footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"dgsgdthfyygjh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-20T10:29:13.957Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-20T10:29:13.958Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:30:11.060Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:30:16.576Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:34:19.822Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:36:54.542Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:37:29.057Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:37:34.287Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:37:34.345Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:37:34.348Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:37:34.350Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:37:34.402Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T10:37:51.323Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T10:37:51.330Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:38:08.882Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:38:49.955Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:38:59.254Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:39:53.296Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:40:17.352Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:41:19.325Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:41:41.439Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:42:46.551Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:43:22.720Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:44:25.818Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:45:01.836Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:45:14.736Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"asdadsfcsfdretgr5grghrthtyj","approval":[],"column":[],"createdAt":"2023-11-20T10:37:51.351Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"ppppppppp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:37:51.351Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:47:15.672Z"}
{"level":"debug","message":{"level":"error","result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:58:15.754Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:22.333Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:22.378Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:22.380Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:22.382Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:22.435Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:40.461Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:40.513Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:40.514Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:40.516Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T10:58:40.532Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T10:59:07.378Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T10:59:07.382Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T10:59:19.330Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:07:47.027Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:08:42.280Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:09:11.189Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:09:21.843Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:11:23.883Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:12:11.947Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:12:23.767Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:12:29.467Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:13:55.003Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:15:04.037Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:15:13.343Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:15:45.755Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:21:05.226Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:21:16.057Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:27:09.813Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:27:23.287Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T11:34:03.550Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:03.589Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:10.474Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:10.525Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:10.527Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:10.531Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:34:10.549Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T11:37:58.435Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T11:37:58.438Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:38:01.583Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:38:11.374Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:38:11.428Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:38:11.433Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:38:11.435Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:38:11.446Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T11:42:14.509Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T11:42:14.513Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:42:20.512Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:43:41.853Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:46:57.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:51:20.033Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:22.144Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:22.148Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:23.335Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:51:32.962Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:35.098Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:35.100Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:51:36.579Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:52:43.639Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-20T11:55:38.778Z"}
{"level":"debug","message":"{\n  _id: new ObjectId(\"6540a5298a5c8eda9ad04e13\"),\n  userName: 'SUPERADMIN',\n  __v: 0,\n  email: 'administrator@wimerasys.com',\n  password: '0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52',\n  userId: '1'\n}userData","timestamp":"2023-11-20T11:55:38.785Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T11:55:38.786Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:55:38.873Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:56:46.061Z"}
{"level":"error","message":"null is not configured","status":406,"timestamp":"2023-11-17T11:18:58.660Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-20T11:56:55.324Z"}
{"level":"debug","message":"{\n  _id: new ObjectId(\"6540a5298a5c8eda9ad04e13\"),\n  userName: 'SUPERADMIN',\n  __v: 0,\n  email: 'administrator@wimerasys.com',\n  password: '0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52',\n  userId: '1'\n}userData","timestamp":"2023-11-20T11:56:55.326Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T11:56:55.327Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:56:55.362Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:58:39.873Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:58:42.508Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:58:44.465Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:58:44.466Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P5","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"New chain fixed","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"PRODUCTION STOPPAGE","TOOL BREAKDOWN":"chain cut","TOOL CHANGE":"Chain"},{"PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL CHANGE":"Tool"}],"createdAt":"2023-11-20T11:42:14.516Z","dName":"","footer":[{"Approved by":"supervisor","NOTE: Tool detail (In case of tool change):":"Chain","Prepared by":"Admin","Sign of Prod. Supervisor ":"SUPERVISOR","Sign of Shift I/C QA":"I/C"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-20","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"2","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:10","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"M2","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"P9","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"125","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterApproval  Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:42:14.516Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T11:58:45.903Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T11:59:59.776Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:05.991Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:06.042Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:06.044Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:06.046Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:06.057Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:13.265Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:44.384Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:44.440Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:44.442Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:44.443Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:00:44.468Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.184Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.237Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.240Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.242Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.303Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:01:18.712Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:02.454Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:02.525Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:02.538Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:02.539Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:02.602Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:02:03.637Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:03:45.784Z"}
{"level":"debug","message":{"_consuming":true,"_dumped":false,"_events":{"end":[null,null]},"_eventsCount":2,"_parsedUrl":{"_raw":"/uploadPdf","auth":null,"hash":null,"host":null,"hostname":null,"href":"/uploadPdf","path":"/uploadPdf","pathname":"/uploadPdf","port":null,"protocol":null,"query":null,"search":null,"slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[{"_bparser":{"_bufPos":40,"_lookbehind":{"data":[13,10,214,114,90,1,0,0,200,1,214,114,90,1,0,0,200,1,214,114,90,1,0,0,200,1,214,114,90,1,0,0,200,1,214,114,90,1,0,0,200,1],"type":"Buffer"},"_lookbehindSize":0,"_needle":{"data":[13,10,45,45,45,45,45,45,87,101,98,75,105,116,70,111,114,109,66,111,117,110,100,97,114,121,52,88,107,77,90,102,66,116,102,112,48,56,107,120,112,120],"type":"Buffer"},"_occ":[42,42,42,42,42,42,42,42,42,42,40,42,42,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,34,42,42,5,42,42,42,15,42,42,42,4,42,42,42,42,42,42,42,42,42,9,42,42,42,27,42,42,42,42,30,42,12,42,42,42,42,42,42,42,42,42,33,14,42,11,42,42,42,42,42,42,18,31,42,19,32,7,42,42,29,42,3,42,24,20,22,1,42,17,42,8,21,42,42,2,16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"matches":2,"maxMatches":null},"_complete":false,"_events":{"close":[null,null],"error":[null,null]},"_eventsCount":9,"_fileEndsLeft":1,"_fileStream":{"_events":{},"_eventsCount":3,"_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":null,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":true},"_readcb":null,"truncated":false},"_finalcb":null,"_hparser":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":true,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closed":false,"corked":0,"decodeStrings":true,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":36689,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":true,"writelen":36689,"writing":true}}],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/checklist","body":{},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":false,"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-US,en;q=0.9","connection":"keep-alive","content-length":"36689","content-type":"multipart/form-data; boundary=----WebKitFormBoundary4XkMZfBtfp08kxpx","host":"localhost:3000","origin":"http://localhost:4200","referer":"http://localhost:4200/","sec-ch-ua":"\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/checklist/uploadPdf","params":{},"query":{},"rawHeaders":["Host","localhost:3000","Connection","keep-alive","Content-Length","36689","sec-ch-ua","\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","Accept","application/json, text/plain, */*","Content-Type","multipart/form-data; boundary=----WebKitFormBoundary4XkMZfBtfp08kxpx","sec-ch-ua-mobile","?0","User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36","sec-ch-ua-platform","\"Windows\"","Origin","http://localhost:4200","Sec-Fetch-Site","same-site","Sec-Fetch-Mode","cors","Sec-Fetch-Dest","empty","Referer","http://localhost:4200/","Accept-Encoding","gzip, deflate, br","Accept-Language","en-US,en;q=0.9"],"rawTrailers":[],"res":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"useChunkedEncodingByDefault":true,"writable":true},"route":{"methods":{"post":true},"path":"/uploadPdf","stack":[{"keys":[],"method":"post","name":"multerMiddleware","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/uploadPdf"},"timestamp":"2023-11-20T12:04:09.451Z"}
{"level":"debug","message":"[object Object]response","timestamp":"2023-11-20T12:04:09.461Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T12:04:13.820Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:04:13.851Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:33.648Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:41.743Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:41.789Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:41.791Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:41.792Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:06:41.826Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:28.882Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:28.945Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:28.949Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:28.953Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:29.024Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:07:29.623Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:02.866Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:02.992Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:03.057Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:03.066Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:03.135Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:03.948Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T12:08:10.869Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:10.873Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:31.348Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:31.438Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:31.442Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:31.445Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:08:31.457Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:09.976Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T12:09:15.532Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:20.937Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:21.021Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:21.024Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:21.027Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:21.044Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:29.822Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:45.654Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:45.742Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:45.745Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:45.749Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:09:45.764Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:20.809Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:20.888Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:20.892Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:20.895Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:20.913Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:55.033Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:55.101Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:55.104Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:55.108Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:55.203Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:10:57.527Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:12:20.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:12:20.760Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:12:20.763Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:12:20.765Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:12:20.794Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T12:14:07.901Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T12:14:07.906Z"}
{"level":"debug","message":{"level":"error","result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200,"timestamp":"2023-11-17T11:18:58.660Z"},"timestamp":"2023-11-20T12:14:12.312Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:14:31.992Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:16:36.271Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:16:36.314Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:16:36.319Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:16:36.344Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:16:36.346Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T12:19:35.636Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-20T17:19:20.838Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-20T17:19:21.754Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-20T17:19:21.757Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-20T17:19:21.792Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-20T17:36:54.343Z"}
{"level":"debug","message":"cc3695bcd4a2a32a4795a42b361ad9c2@d86d72a0eb6865edba2c8bb4ae01c666","timestamp":"2023-11-20T17:36:54.353Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:36:54.415Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-20T17:38:40.867Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-20T17:38:41.446Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-20T17:38:41.447Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-20T17:38:41.467Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-20T17:38:41.506Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-20T17:38:41.525Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:38:46.834Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-20T17:39:05.255Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-20T17:39:15.196Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:39:17.650Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:40:21.146Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:21.205Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:33.876Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:33.977Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:33.983Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:33.989Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:40:34.003Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:41:18.847Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:41:18.853Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-20T17:41:36.971Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-20T17:41:55.505Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-20T17:42:06.523Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-20T17:42:09.182Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-20T17:42:17.065Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-20T17:42:50.418Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-20T17:42:50.834Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-20T17:42:50.835Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-20T17:42:50.843Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-20T17:42:50.877Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-20T17:42:50.887Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-20T17:43:07.310Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T17:43:07.319Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:43:07.388Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:45:38.605Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:45:58.405Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:47:08.167Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:47:32.970Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"SUPERADMIN\",\"password\":\"welcome\"}","timestamp":"2023-11-20T17:47:54.227Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T17:47:54.232Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:47:54.313Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:48:58.530Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"SUPERADMIN\",\"password\":\"welcome\"}","timestamp":"2023-11-20T17:49:15.242Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T17:49:15.246Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:49:15.314Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"SUPERADMIN\",\"password\":\"welcome\"}","timestamp":"2023-11-20T17:52:44.098Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-20T17:52:44.103Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:52:44.179Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:53:09.722Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:56:24.689Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:56:24.694Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:56:29.016Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:56:29.020Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:56:31.906Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:56:31.911Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-20T17:56:34.903Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:56:34.908Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-20T17:57:33.131Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-20T17:57:33.540Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-20T17:57:33.541Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-20T17:57:33.555Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-20T17:57:33.593Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-20T17:58:05.901Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-20T18:00:33.038Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-20T18:00:33.788Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-20T18:00:33.792Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-20T18:00:33.841Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-20T18:00:33.952Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-20T18:00:33.959Z"}
