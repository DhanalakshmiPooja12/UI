{"level":"debug","message":{"result":[{"PartId":"P9","Tempname":"errrrrrrrrrrrr","approval":[],"column":[{"hgfdsdesdfg":"RE4RTYUIOP[","jhgfdsaz":"BNM,","nhbgvfdsa":"FGHKL;","wqertyukl":"POIJH"}],"createdAt":"2023-11-21T10:43:48.054Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"POOPOPOPOPO","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:43:48.054Z"}],"status":200},"timestamp":"2023-11-22T04:40:21.351Z"}
{"level":"debug","message":{"result":[{"PartId":"P9","Tempname":"errrrrrrrrrrrr","approval":[],"column":[{"hgfdsdesdfg":"RE4RTYUIOP[","jhgfdsaz":"BNM,","nhbgvfdsa":"FGHKL;","wqertyukl":"POIJH"}],"createdAt":"2023-11-21T10:43:48.054Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"POOPOPOPOPO","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:43:48.054Z"}],"status":200},"timestamp":"2023-11-22T04:40:38.971Z"}
{"level":"debug","message":{"result":[{"PartId":"P9","Tempname":"errrrrrrrrrrrr","approval":[],"column":[{"hgfdsdesdfg":"RE4RTYUIOP[","jhgfdsaz":"BNM,","nhbgvfdsa":"FGHKL;","wqertyukl":"POIJH"}],"createdAt":"2023-11-21T10:43:48.054Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"POOPOPOPOPO","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:43:48.054Z"}],"status":200},"timestamp":"2023-11-22T04:41:10.541Z"}
{"level":"debug","message":{"result":[{"PartId":"P9","Tempname":"errrrrrrrrrrrr","approval":[],"column":[{"hgfdsdesdfg":"RE4RTYUIOP[","jhgfdsaz":"BNM,","nhbgvfdsa":"FGHKL;","wqertyukl":"POIJH"}],"createdAt":"2023-11-21T10:43:48.054Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"POOPOPOPOPO","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:43:48.054Z"}],"status":200},"timestamp":"2023-11-22T04:44:32.701Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T04:44:41.798Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:44:41.809Z"}
{"level":"debug","message":{"result":[{"PartId":"P5","Tempname":"errrrrrrrrrrrr","approval":[],"column":[{"hgfdsdesdfg":"efrgfhjm","jhgfdsaz":"ASDFGB","nhbgvfdsa":"gfdxsza","wqertyukl":"NHBVFCDXSZ"}],"createdAt":"2023-11-21T10:28:39.661Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"RTWRETRETTTETETETT","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:28:39.661Z"}],"status":200},"timestamp":"2023-11-22T04:44:43.073Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T04:44:54.756Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:44:54.760Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T04:44:56.111Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:45:13.492Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T04:54:27.160Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:55:03.122Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:55:03.215Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:55:03.220Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:55:03.224Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:55:03.245Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:56:23.498Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:56:25.657Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:56:40.591Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T04:56:46.153Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:33.373Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:38.203Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:38.302Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:38.306Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:38.311Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:08:38.335Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:10.464Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:10.600Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:10.602Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:10.607Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:10.721Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:40.534Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:40.686Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:40.688Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:40.691Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:25:40.765Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:11.308Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:11.378Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:11.381Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:11.406Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:11.408Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:26.275Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:27:47.284Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-22T05:31:05.177Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-22T05:31:05.825Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-22T05:31:05.826Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-22T05:31:05.845Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-22T05:31:05.905Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-22T05:31:05.909Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:50:55.399Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-22T05:51:04.832Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-22T05:51:05.355Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-22T05:51:05.356Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-22T05:51:05.378Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-22T05:51:05.425Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-22T05:51:05.439Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T05:52:50.504Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T05:52:57.489Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:12.696Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:20.192Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T05:53:24.773Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:24.779Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:24.798Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:26.500Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:53:47.076Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T05:54:42.964Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:54:42.968Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:54:49.984Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:55:51.154Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:55:57.576Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:56:10.352Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:56:13.074Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:56:21.673Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:57:24.748Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T05:57:27.635Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:57:29.549Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T05:57:34.747Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T05:57:34.751Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T05:57:34.754Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T05:57:36.808Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:57:48.930Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T05:57:53.352Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T05:57:53.355Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T05:57:53.356Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T05:57:54.451Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:58:00.541Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T05:58:04.462Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T05:58:04.463Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T05:58:04.465Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T05:58:05.558Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T05:59:04.856Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T05:59:07.875Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T05:59:08.880Z"}
{"level":"debug","message":{"result":[{"PartId":"P1","Tempname":"tetewrtertrtewrtert","approval":[],"column":[{"][poiuyrds":"44","ferefrfeaefrf":"4","lkjhgfdssssssssssssdfghjk":"5","rrwer":"t","rtew":"5","sxcdvfghj,":"6t","uytrw":"54"},{"sxcdvfghj,":"4"}],"createdAt":"2023-11-21T07:56:45.521Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"nhjghtftfggvbjbh","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T07:56:45.521Z"}],"status":200},"timestamp":"2023-11-22T05:59:17.838Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:03:37.190Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:03:42.640Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200},"timestamp":"2023-11-22T06:03:44.946Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"TERERERTERTERTERTERTER","approval":[],"column":[{"FXHFGBH":"d","GDGDFGSDG":"a","SDFDFDFG":"d"}],"createdAt":"2023-11-20T10:59:07.385Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"partId","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T10:59:07.385Z"}],"status":200},"timestamp":"2023-11-22T06:03:46.158Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:04:01.208Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:05:48.558Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:05:50.314Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:05:53.721Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:05:53.723Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:05:53.725Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:06:00.781Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:08:07.597Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:12:38.280Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:13:55.284Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-22T06:14:05.959Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-22T06:14:07.234Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-22T06:14:52.866Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:15:54.498Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T06:15:57.676Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T06:16:00.655Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:16:06.646Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:16:17.250Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T06:16:20.332Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T06:16:21.684Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:03.356Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T06:18:23.317Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:23.375Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:25.915Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:25.955Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:25.959Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:25.962Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:18:25.978Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:19:06.147Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:19:06.246Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:19:06.248Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:19:06.250Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:19:06.297Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:36.559Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:36.677Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:36.683Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:36.686Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:36.719Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:40.318Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:40.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:40.365Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:40.366Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:20:40.380Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:17.991Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:18.095Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:18.142Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:18.147Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:18.194Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:40.000Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:40.160Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:40.175Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:40.183Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:40.225Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:42.778Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:45.516Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:45.563Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:45.565Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:45.567Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:21:45.582Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:24:49.723Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:24:49.882Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:24:49.885Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:24:49.888Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:24:49.992Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:05.330Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:08.056Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-22T06:27:21.609Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-22T06:27:21.614Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:21.764Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:30.070Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:32.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:32.615Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:32.618Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:32.620Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:27:32.651Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:28:11.862Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:28:17.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:28:17.896Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:28:17.899Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:28:17.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:28:17.916Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:30:03.056Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:30:03.112Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:30:03.114Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:30:03.139Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:30:03.141Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:11.152Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:11.195Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:11.197Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:11.199Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:11.256Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:37.269Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:44.916Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:44.968Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:44.971Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:44.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:44.984Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:32:57.381Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:00.400Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T06:33:23.859Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:23.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:25.688Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:25.745Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:25.747Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:25.749Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:33:25.758Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:13.776Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T06:34:33.393Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:33.417Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:35.812Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:35.862Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:35.864Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:35.867Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:34:35.880Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:47.011Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:47.176Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:47.179Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:47.183Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:47.294Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:57.502Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:57.550Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:57.552Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:57.555Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:36:57.578Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:41:31.572Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:41:31.742Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:41:31.759Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:41:31.764Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:41:31.827Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:10.188Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:10.355Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:10.359Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:10.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:10.406Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:12.794Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:12.892Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:12.895Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:12.897Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:13.018Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:15.939Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:42:21.309Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:42:25.598Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:42:25.599Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:42:25.601Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:42:26.697Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:43:58.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:08.983Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:09.030Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:09.032Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:09.034Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:09.053Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:14.132Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:44:28.095Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:44:28.100Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:44:28.101Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:44:29.936Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:44:33.088Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:44:40.067Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:44:40.070Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:44:40.072Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"createdAt":"2023-11-21T08:05:53.019Z","dName":"","footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T08:05:53.019Z"}],"status":200},"timestamp":"2023-11-22T06:44:41.315Z"}
{"level":"debug","message":{"Tempname":"First Part Approval Information Slip","column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-22T06:44:43.514Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T06:44:43.515Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:44:43.582Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:44:43.584Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:48:11.592Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:48:14.195Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:48:14.198Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:48:15.530Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:48:23.411Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T06:48:32.261Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:48:32.264Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T06:48:40.481Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:11.027Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:16.967Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:17.020Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:17.024Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:17.028Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:17.057Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T06:56:30.660Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T06:56:30.666Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:37.185Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T06:56:39.489Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T06:56:40.390Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T06:56:52.119Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T07:00:40.870Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:00:43.694Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:00:50.896Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:01:27.484Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-22T07:01:30.778Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-22T07:01:32.919Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:01:50.029Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:04:25.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:04:33.487Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:04:39.293Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:04:45.753Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:21:38.277Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T07:21:41.201Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T07:21:42.531Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:21:50.437Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:42:41.554Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T07:44:18.601Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:17:49.223Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T09:17:51.969Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T09:17:51.971Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T09:17:56.094Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T09:18:11.134Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:18:21.795Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T09:18:23.858Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T09:18:23.861Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T09:18:25.345Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:19:08.606Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:19:14.568Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T09:19:17.405Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:19:22.907Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:33:23.601Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T09:33:53.911Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:34:02.596Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T09:34:05.437Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-22T09:34:09.891Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T10:59:15.211Z"}
{"level":"debug","message":{"result":[{"PartId":"P3","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"Fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"BreakDown","TOOL CHANGE":"tool"},{"TOOL CHANGE":"ToolChange"}],"createdAt":"2023-11-20T11:37:58.443Z","dName":"Quality","footer":[],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-01","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"1","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:00","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"Machine1","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"Part1","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"12345","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"Master Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T11:37:58.443Z"}],"status":200},"timestamp":"2023-11-22T11:04:03.127Z"}
{"level":"debug","message":{"result":[{"PartId":"P7","Tempname":"First Part Approval Information Slip","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppeage","TOOL BREAKDOWN":"break","TOOL CHANGE":"tool"}],"createdAt":"2023-11-20T12:14:07.910Z","dName":"Product","footer":[{"Approved by":"admin","NOTE: Tool detail (In case of tool change):":"tool","Prepared by":"Admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"I/c"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-03","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"4","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"17:40","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"machine3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"part234","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"123","permission":"Admin"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (âˆš) mark against appropriate column","masterName":"MasterValue Slip","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T12:14:07.910Z"}],"status":200},"timestamp":"2023-11-22T11:04:03.132Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:04:17.907Z"}
{"level":"debug","message":{"_consuming":true,"_dumped":false,"_events":{"end":[null,null]},"_eventsCount":2,"_parsedUrl":{"_raw":"/uploadPdf","auth":null,"hash":null,"host":null,"hostname":null,"href":"/uploadPdf","path":"/uploadPdf","pathname":"/uploadPdf","port":null,"protocol":null,"query":null,"search":null,"slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[{"_bparser":{"_bufPos":40,"_lookbehind":{"data":[13,10,0,0,0,0,0,0,208,79,121,213,23,2,0,0,205,37,0,0,28,0,0,0,184,75,121,213,23,2,0,0,120,80,121,213,23,2,0,0,1,0],"type":"Buffer"},"_lookbehindSize":0,"_needle":{"data":[13,10,45,45,45,45,45,45,87,101,98,75,105,116,70,111,114,109,66,111,117,110,100,97,114,121,112,57,55,113,82,75,110,75,101,118,112,121,55,122,113,74],"type":"Buffer"},"_occ":[42,42,42,42,42,42,42,42,42,42,40,42,42,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,34,42,42,42,42,42,42,42,42,42,3,42,14,42,42,42,42,42,42,42,42,23,42,42,42,27,42,42,42,42,8,42,42,42,42,42,42,11,42,42,42,42,33,42,42,42,42,42,42,42,42,42,18,31,42,19,7,42,42,42,29,42,42,42,24,9,22,5,1,17,42,28,21,6,42,42,4,2,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"matches":2,"maxMatches":null},"_complete":false,"_events":{"close":[null,null],"error":[null,null]},"_eventsCount":9,"_fileEndsLeft":1,"_fileStream":{"_events":{},"_eventsCount":3,"_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":null,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":true},"_readcb":null,"truncated":false},"_finalcb":null,"_hparser":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":true,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closed":false,"corked":0,"decodeStrings":true,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":36573,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":true,"writelen":36573,"writing":true}}],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/checklist","body":{},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":false,"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-US,en;q=0.9","connection":"keep-alive","content-length":"36573","content-type":"multipart/form-data; boundary=----WebKitFormBoundaryp97qRKnKevpy7zqJ","host":"localhost:3000","origin":"http://localhost:4200","referer":"http://localhost:4200/","sec-ch-ua":"\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/checklist/uploadPdf","params":{},"query":{},"rawHeaders":["Host","localhost:3000","Connection","keep-alive","Content-Length","36573","sec-ch-ua","\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","Accept","application/json, text/plain, */*","Content-Type","multipart/form-data; boundary=----WebKitFormBoundaryp97qRKnKevpy7zqJ","sec-ch-ua-mobile","?0","User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36","sec-ch-ua-platform","\"Windows\"","Origin","http://localhost:4200","Sec-Fetch-Site","same-site","Sec-Fetch-Mode","cors","Sec-Fetch-Dest","empty","Referer","http://localhost:4200/","Accept-Encoding","gzip, deflate, br","Accept-Language","en-US,en;q=0.9"],"rawTrailers":[],"res":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"useChunkedEncodingByDefault":true,"writable":true},"route":{"methods":{"post":true},"path":"/uploadPdf","stack":[{"keys":[],"method":"post","name":"multerMiddleware","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/uploadPdf"},"timestamp":"2023-11-22T11:04:53.187Z"}
{"level":"debug","message":"[object Object]response","timestamp":"2023-11-22T11:04:53.207Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T11:09:30.252Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:30.317Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:35.128Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:35.201Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:35.204Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:35.214Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:09:35.239Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T11:11:01.557Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-22T11:11:01.560Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-22T11:11:06.476Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:11:17.296Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-22T11:11:20.433Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:11:36.458Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-22T11:11:40.240Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-22T11:11:45.073Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:11:45.075Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","B":"5"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-22T11:12:04.314Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:12:04.316Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","B":"5"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-22T11:12:06.215Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:12:06.216Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","B":"5"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-22T11:12:08.511Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:12:08.512Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","B":"5"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-22T11:12:22.513Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:12:22.514Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:13:18.649Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:13:22.941Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-22T11:13:26.025Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","A2":"12","A3":"4","B":"3"},{"A1":"3"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-22T11:13:42.967Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:13:42.968Z"}
{"level":"debug","message":{"Tempname":"TestingTemplate","column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2","A2":"12","A3":"4","B":"3"},{"A1":"3","B":"4"}],"footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-22T11:14:02.909Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-22T11:14:02.911Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:14:50.251Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:14:54.569Z"}
{"level":"debug","message":{"result":[{"Tempname":"defsdfsd","approval":[],"column":[{"dsdssd":"aaaaaa","sdsdfsdf":"aaaa"}],"createdAt":"2023-11-22T06:56:30.685Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"asasas","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T06:56:30.685Z"}],"status":200},"timestamp":"2023-11-22T11:35:11.735Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:13.634Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:17.181Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:43.752Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:43.810Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:43.812Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:43.839Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:43.842Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T11:35:58.195Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:14:47.445Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:15:02.229Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:17:44.008Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:01.127Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:01.220Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:01.223Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:01.226Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:01.240Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:08.515Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:08.565Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:08.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:08.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T12:54:08.658Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:05:46.411Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:05:46.584Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:05:46.594Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:05:46.622Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:05:46.625Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:11.054Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:11.164Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:11.172Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:11.222Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:11.226Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:41.519Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:41.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:41.663Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:41.731Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:07:41.734Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:08:41.203Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:08:41.329Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:08:41.332Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:08:41.434Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:08:41.437Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:26.529Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:26.635Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:26.641Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:26.740Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:26.743Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:47.691Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:47.778Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:47.780Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:47.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:12:47.796Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:14:07.715Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:14:07.951Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:14:07.991Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:14:08.001Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:14:08.044Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:15:05.696Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:15:05.760Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:15:05.762Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:15:05.821Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:15:05.827Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:18:02.543Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:18:02.676Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:18:02.680Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:18:02.731Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:18:02.733Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:23:36.685Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:23:36.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:23:36.787Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:23:36.825Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:23:36.829Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:25:55.252Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:25:55.354Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:25:55.393Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:25:55.440Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:25:55.447Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:26:22.142Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:26:22.442Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:26:22.448Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:26:22.587Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:26:22.591Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:27:33.801Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:27:33.930Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:27:33.934Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:27:34.003Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:27:34.013Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-22T13:28:10.858Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-22T13:28:37.469Z"}
