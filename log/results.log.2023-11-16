{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T04:44:03.865Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T04:44:19.009Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T04:44:24.851Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T05:37:54.056Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:40:44.287Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:46:25.039Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:46:30.276Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T05:46:33.401Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T05:46:35.488Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:46:44.437Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:46:50.188Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:52:29.423Z"}
{"level":"debug","message":{"_consuming":true,"_dumped":false,"_events":{"end":[null,null]},"_eventsCount":2,"_parsedUrl":{"_raw":"/uploadPdf","auth":null,"hash":null,"host":null,"hostname":null,"href":"/uploadPdf","path":"/uploadPdf","pathname":"/uploadPdf","port":null,"protocol":null,"query":null,"search":null,"slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[{"_bparser":{"_bufPos":40,"_lookbehind":{"data":[13,10,111,108,101,78,97,109,101,34,58,34,83,117,112,101,114,118,105,115,111,114,34,44,34,95,95,118,34,58,48,125,44,123,34,95,105,100,34,58,34,54],"type":"Buffer"},"_lookbehindSize":0,"_needle":{"data":[13,10,45,45,45,45,45,45,87,101,98,75,105,116,70,111,114,109,66,111,117,110,100,97,114,121,115,120,66,110,83,122,121,86,77,70,82,73,112,72,69,100],"type":"Buffer"},"_occ":[42,42,42,42,42,42,42,42,42,42,40,42,42,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,34,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,13,42,42,1,6,42,2,4,42,30,42,7,42,42,42,42,5,11,42,42,8,33,42,42,42,42,42,42,42,42,42,18,31,42,19,32,42,42,42,29,42,42,42,24,12,22,3,42,17,15,28,21,42,42,14,9,10,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"matches":1,"maxMatches":null},"_complete":false,"_events":{"close":[null,null],"error":[null,null]},"_eventsCount":9,"_fileEndsLeft":1,"_fileStream":{"_events":{},"_eventsCount":3,"_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":null,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":true},"_readcb":null,"truncated":false},"_finalcb":null,"_hparser":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":true,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closed":false,"corked":0,"decodeStrings":true,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":65536,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":true,"writelen":65536,"writing":true}}],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/checklist","body":{},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":false,"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-US,en;q=0.9","connection":"keep-alive","content-length":"373438","content-type":"multipart/form-data; boundary=----WebKitFormBoundarysxBnSzyVMFRIpHEd","host":"localhost:3000","origin":"http://localhost:4200","referer":"http://localhost:4200/","sec-ch-ua":"\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/checklist/uploadPdf","params":{},"query":{},"rawHeaders":["Host","localhost:3000","Connection","keep-alive","Content-Length","373438","sec-ch-ua","\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","Accept","application/json, text/plain, */*","Content-Type","multipart/form-data; boundary=----WebKitFormBoundarysxBnSzyVMFRIpHEd","sec-ch-ua-mobile","?0","User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36","sec-ch-ua-platform","\"Windows\"","Origin","http://localhost:4200","Sec-Fetch-Site","same-site","Sec-Fetch-Mode","cors","Sec-Fetch-Dest","empty","Referer","http://localhost:4200/","Accept-Encoding","gzip, deflate, br","Accept-Language","en-US,en;q=0.9"],"rawTrailers":[],"res":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"useChunkedEncodingByDefault":true,"writable":true},"route":{"methods":{"post":true},"path":"/uploadPdf","stack":[{"keys":[],"method":"post","name":"multerMiddleware","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/uploadPdf"},"timestamp":"2023-11-16T05:53:03.569Z"}
{"level":"debug","message":"[object Object]response","timestamp":"2023-11-16T05:53:03.582Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-16T05:59:23.733Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:23.800Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:39.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:39.390Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:39.392Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:39.395Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T05:59:39.406Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:18:43.013Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-16T06:19:19.703Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:19.726Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:21.996Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:22.026Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:22.028Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:22.032Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:19:22.046Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:09.204Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:09.292Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:09.295Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:09.297Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:09.357Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:32.751Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:32.844Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:32.851Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:32.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:32.913Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:52.114Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:52.175Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:52.177Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:52.184Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:20:52.249Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:21:13.981Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:21:14.049Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:21:14.059Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:21:14.064Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:21:14.132Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:13.485Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:13.574Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:13.584Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:13.611Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:13.642Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:35.556Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:35.623Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:35.625Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:35.627Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:22:35.671Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:23:31.879Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:23:31.952Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:23:31.960Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:23:31.962Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:23:31.996Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:25.045Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:25.074Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:25.077Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:25.081Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:25.094Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:55.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:55.744Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:55.746Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:55.748Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:24:55.807Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:26:11.548Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:26:11.610Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:26:11.613Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:26:11.616Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:26:11.656Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:06.386Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:06.524Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:06.529Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:06.533Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:06.570Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:41.390Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:27:44.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:44.428Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:44.453Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:44.455Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:44.457Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:44.489Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:50.600Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:50.675Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:50.678Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:50.681Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:28:50.710Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:36.579Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:36.687Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:36.688Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:36.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:36.744Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:43.104Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:43.214Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:43.231Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:43.234Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:43.295Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:56.783Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:59.672Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:59.702Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:59.704Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:59.706Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:29:59.715Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:30:27.154Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:30:27.209Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:30:27.211Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:30:27.213Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:30:27.259Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:06.418Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:06.524Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:06.597Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:06.601Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:06.766Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:27.347Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:27.412Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:27.414Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:27.416Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:27.458Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:46.101Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:46.186Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:46.189Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:46.191Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:33:46.227Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:16.084Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:16.155Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:16.157Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:16.161Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:16.206Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:39.273Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:39.331Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:39.334Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:39.347Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:34:39.383Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:35:33.314Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:35:33.434Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:35:33.448Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:35:33.450Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:35:33.504Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:26.270Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:26.348Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:26.350Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:26.364Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:26.396Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:50.368Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:50.422Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:50.469Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:50.472Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:37:50.524Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-16T06:41:17.365Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-16T06:41:17.368Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T06:41:23.140Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.153Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.158Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.159Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.164Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.166Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.171Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:42:22.176Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T06:57:43.592Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:58:18.485Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-16T06:59:11.189Z"}
{"level":"debug","message":"{\n  _id: new ObjectId(\"6540a5298a5c8eda9ad04e13\"),\n  userName: 'SUPERADMIN',\n  __v: 0,\n  email: 'administrator@wimerasys.com',\n  password: '0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52',\n  userId: '1'\n}userData","timestamp":"2023-11-16T06:59:11.194Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-16T06:59:11.195Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:59:11.268Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:59:25.194Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:59:28.574Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T06:59:31.397Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T06:59:47.248Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T06:59:59.353Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:00:11.817Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:01:17.487Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:11:53.001Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:26:51.467Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:27:45.442Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:29:14.722Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:30:06.299Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:32:43.219Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:32:43.257Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:35:59.190Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:35:59.218Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:36:49.486Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:36:49.529Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:37:01.187Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:37:01.240Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:37:15.698Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:37:15.720Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:53:30.756Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T07:53:30.764Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:17:23.936Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:42:55.335Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:22.328Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:22.361Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:22.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:22.381Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:22.383Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:35.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:35.884Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:35.885Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:35.887Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:35.902Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:47.145Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:43:49.632Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:43:53.740Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:43:58.536Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:44:00.686Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:45:28.757Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:46:01.663Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:46:20.185Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:46:56.506Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:47:34.610Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:47:38.343Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:47:39.411Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:49:01.330Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:49:13.493Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:50:37.847Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:51:13.645Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T09:51:54.331Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:52:44.840Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:52:48.686Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:52:52.799Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:52:54.271Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:53:40.831Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:54:16.610Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:54:42.938Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:54:57.359Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:55:14.939Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:55:47.796Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:56:02.349Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:56:32.859Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:58:37.110Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T09:59:18.701Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:59:27.357Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:59:27.383Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:59:27.386Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:59:27.388Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T09:59:27.401Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:14.497Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:14.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:14.589Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:14.591Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:14.637Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:36.094Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:36.150Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:36.151Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:36.153Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:00:36.183Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:01:14.216Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:01:14.267Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:01:14.269Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:01:14.271Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:01:14.296Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:05:02.640Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:05:02.687Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:05:02.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:05:02.692Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:05:02.720Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:46.532Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:46.649Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:46.651Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:46.653Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:46.704Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:58.554Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:58.603Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:58.607Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:58.610Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:06:58.691Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:16.669Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:16.716Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:16.717Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:16.719Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:16.756Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:42.514Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:42.566Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:42.611Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:42.615Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:09:42.672Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:11.361Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:11.408Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:11.410Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:11.412Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:11.467Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:28.628Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:28.694Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:28.699Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:28.710Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:10:28.745Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:11:09.642Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:11:09.780Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:11:09.784Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:11:09.787Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:11:09.838Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:00.353Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:00.407Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:00.409Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:00.411Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:00.451Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:56.052Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:56.114Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:56.116Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:56.119Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:12:56.146Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:15:49.518Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:15:49.593Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:15:49.594Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:15:49.596Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:15:49.627Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:10.540Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:10.616Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:10.618Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:10.627Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:10.670Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:54.047Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:54.181Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:54.183Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:54.186Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:19:54.257Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:21:48.869Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:21:48.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:21:48.976Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:21:48.978Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:21:49.043Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:23:41.124Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:23:41.199Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:23:41.201Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:23:41.203Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:23:41.243Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:24.463Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:24.518Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:24.522Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:24.527Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:24.555Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:59.782Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:59.860Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:59.901Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:59.904Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:24:59.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:25:23.892Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:25:23.952Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:25:23.955Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:25:23.957Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:25:23.993Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:34:37.055Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:34:37.116Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:34:37.119Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:34:37.122Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:34:37.156Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:48.336Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:48.418Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:48.422Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:48.424Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:48.482Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:36:54.506Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:36:56.348Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:36:57.703Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:37:29.454Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:39:26.068Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:39:35.854Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:39:48.505Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T10:39:57.170Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:40:04.870Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-16T10:43:08.634Z"}
{"level":"debug","message":"{\n  _id: new ObjectId(\"6540a5298a5c8eda9ad04e13\"),\n  userName: 'SUPERADMIN',\n  __v: 0,\n  email: 'administrator@wimerasys.com',\n  password: '0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52',\n  userId: '1'\n}userData","timestamp":"2023-11-16T10:43:08.639Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-16T10:43:08.640Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:43:08.732Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:43:17.671Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:43:17.677Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:44:15.386Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T10:44:15.418Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T10:44:34.240Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:03:43.821Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:03:43.845Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:03:43.848Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:03:43.850Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:03:43.867Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:07:00.139Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T11:54:47.736Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:55:01.857Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:55:01.863Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T11:55:11.404Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T11:55:11.411Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:55:22.879Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:55:22.885Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:56:48.150Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:56:48.181Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:57:53.195Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:57:53.235Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:59:30.403Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T11:59:30.436Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:00:22.741Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:00:22.858Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:19:57.127Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:19:57.151Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:21:10.766Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:21:10.816Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:21:46.839Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:21:46.893Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:22:37.932Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:22:37.972Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:23:07.286Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:23:07.329Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:23:40.185Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:23:40.223Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:25:04.055Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:25:04.112Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:26:10.785Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:26:10.830Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:26:24.329Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:26:24.360Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:27:29.940Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:27:29.977Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:27:48.565Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:27:48.601Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:14.554Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:14.601Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:29.490Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:29.572Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:57.985Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:28:58.086Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:29:29.986Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:29:30.024Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:29:49.108Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:29:49.132Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:31:29.935Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:31:29.970Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:31:57.270Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:31:57.306Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:32:07.530Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:32:07.554Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:32:19.566Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:32:19.580Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:33:11.495Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:33:11.558Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:33:39.875Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:33:39.918Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:08.042Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:08.092Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:24.785Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:24.818Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:39.537Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:34:39.593Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:35:38.466Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:35:38.482Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:36:01.487Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:36:01.515Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:37:41.203Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:37:41.235Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:37:56.732Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:37:56.832Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:39:34.664Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:39:34.695Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:40:09.862Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:40:09.882Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:43:20.225Z"}
{"level":"debug","message":{"result":[{"Tempname":"templateView","approval":[],"column":[{"A1":"1","A2":"2","A3":"34","A4":"4","B1":"5","B2":"6","B3":"6","C1":"7","C2":"8","D1":"9","D2":"1","D3":"2"},{"A1":"1"},{"A1":"2"}],"createdAt":"2023-11-16T06:41:17.380Z","dName":"","footer":[{"Approved by":"34","Level of Approval":"2","Quality Assurance":"1","Signature":"4"},{"Quality Assurance":"2"}],"footerTitle":"Footer","machineName":"","mainData":[{"mName":"","mvalue":""}],"mainHeader":"Table","masterName":"MasterViewTemp","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[{"A":"1","B":"2","C":"3","D":"4","E":"2"},{"A":"qsad","B":"dfdg"},{"A":"sdfg"}],"subHeader":"SubTable","subMetdata":[],"updatedAt":"2023-11-16T06:41:17.380Z"}],"status":200},"timestamp":"2023-11-16T12:43:20.261Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T12:49:16.733Z"}
{"level":"debug","message":{"result":[{"Tempname":"SubheaderTemplate","approval":[],"column":[{"A1":"s","A2":"f","A3":"g","B1":"h","C1":"g","C2":"f"},{"A1":"we","A2":"e","A3":"rt","B1":"t","C1":"w","C2":"w"}],"createdAt":"2023-11-15T11:59:20.217Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mvalue":""}],"masterName":"sfddfghgfdfgfhggf","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-15T11:59:20.217Z"}],"status":200},"timestamp":"2023-11-16T12:49:16.740Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-16T12:49:28.646Z"}
