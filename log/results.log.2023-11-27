{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:30:00.227Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:36:05.879Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:36:58.917Z"}
{"level":"debug","message":{"result":[{"Tempname":"dfsrffssf","approval":[],"column":[{"iiuyuy":"23322332","sdfw4erfdcv":"qrfwqr","sfsdfsdf":"fqwfwed","ujtyhfgdf":"rfqerferf"}],"createdAt":"2023-11-23T05:31:14.812Z","dName":"","footer":[{"uytyryty":"32wqqwe","ytyryrtyryyyrt":"233232"}],"machineName":"","mainData":[{"mName":"sdfsafsdfadf","mtype":"text","mvalue":"poiuytre","permission":"SUPERADMIN"}],"masterName":"lllllllkkllklkkkk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-23T05:31:14.812Z"}],"status":200},"timestamp":"2023-11-27T04:40:32.974Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-27T04:40:43.921Z"}
{"level":"debug","message":{"result":[{"Tempname":"Template001","approval":[],"column":[{"Actual":"4","LSL":"2","S.No":"1","Status":"5","USL":"3"},{"S.No":"2"}],"createdAt":"2023-11-07T11:00:54.997Z","dName":"Quality","footer":[],"machineName":"Machine 2","mainData":[],"masterName":"Master001","metadata":[],"plantName":"Plant 2","shiftName":"Shift 1","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-07T11:00:54.997Z"}],"status":200},"timestamp":"2023-11-27T04:41:13.320Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-27T04:41:40.808Z"}
{"level":"debug","message":{"result":[{"Tempname":"tableData","approval":[],"column":[{"a":"wqe","dadsds":"ewq","ddcdsdsdsdffvfd":"erw"},{"a":"r"}],"createdAt":"2023-11-21T10:14:02.255Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"iuytrewqwsfghjk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T10:14:02.255Z"}],"status":200},"timestamp":"2023-11-27T04:41:53.142Z"}
{"level":"debug","message":{"result":[{"Tempname":"TemplateValue001","approval":[],"column":[{"":"3","A1":"1","A2":"2","C1":"4"},{"A1":"12"}],"createdAt":"2023-11-20T07:37:42.931Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"MasterValiue002","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T07:37:42.931Z"}],"status":200},"timestamp":"2023-11-27T04:42:01.060Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:42:04.223Z"}
{"level":"debug","message":{"result":[{"Tempname":"TemplateData587","approval":[],"column":[{"DDDSDED":"TRGVRTRG","addfsdd":"WDXFGUIOLPOIJUHYGTE","dsdsadasd":"TRGVG"}],"createdAt":"2023-11-21T07:20:54.531Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"","mtype":""}],"masterName":"OIUYTRDUYTFRD","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-21T07:20:54.531Z"}],"status":200},"timestamp":"2023-11-27T04:42:12.305Z"}
{"level":"debug","message":{"result":[{"Tempname":"templasasaasasasas","approval":[],"column":[{"asdfrgthju":"122","ytreswa":"2"},{"asdfrgthju":"2"}],"createdAt":"2023-11-20T17:41:18.860Z","dName":"","footer":[{"hgfds":"3","hygfrdefgthy":"1"}],"machineName":"","mainData":[{"mName":"dsfrgthy","mtype":"text","mvalue":"iuytrew","permission":"Supervisor"}],"masterName":"rwewwewrewrwe","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-20T17:41:18.860Z"}],"status":200},"timestamp":"2023-11-27T04:43:18.011Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:43:22.606Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:55:41.444Z"}
{"level":"debug","message":{"_consuming":true,"_dumped":false,"_events":{"end":[null,null]},"_eventsCount":2,"_parsedUrl":{"_raw":"/uploadPdf","auth":null,"hash":null,"host":null,"hostname":null,"href":"/uploadPdf","path":"/uploadPdf","pathname":"/uploadPdf","port":null,"protocol":null,"query":null,"search":null,"slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[{"_bparser":{"_bufPos":40,"_lookbehind":{"data":[13,10,0,0,0,240,63,0,55,0,0,0,73,5,0,0,0,0,0,0,221,7,0,0,0,0,0,0,0,34,0,0,0,16,105,115,109,97,115,116,101,114],"type":"Buffer"},"_lookbehindSize":0,"_needle":{"data":[13,10,45,45,45,45,45,45,87,101,98,75,105,116,70,111,114,109,66,111,117,110,100,97,114,121,122,78,65,82,77,76,116,118,52,48,115,84,76,52,116,72],"type":"Buffer"},"_occ":[42,42,42,42,42,42,42,42,42,42,40,42,42,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,34,42,42,6,42,42,42,2,42,42,42,42,42,42,42,42,42,42,42,42,13,23,42,42,42,27,42,42,42,42,30,3,11,14,42,42,42,12,42,4,42,42,33,42,42,42,42,42,42,42,42,42,18,31,42,19,32,42,42,42,29,42,42,42,24,20,22,42,42,17,5,1,21,8,42,42,16,15,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"matches":1,"maxMatches":null},"_complete":false,"_events":{"close":[null,null],"error":[null,null]},"_eventsCount":9,"_fileEndsLeft":1,"_fileStream":{"_events":{},"_eventsCount":3,"_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":null,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":true},"_readcb":null,"truncated":false},"_finalcb":null,"_hparser":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":true,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closed":false,"corked":0,"decodeStrings":true,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":65536,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":true,"writelen":65536,"writing":true}}],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/checklist","body":{},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":false,"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-US,en;q=0.9","connection":"keep-alive","content-length":"96198","content-type":"multipart/form-data; boundary=----WebKitFormBoundaryzNARMLtv40sTL4tH","host":"localhost:3000","origin":"http://localhost:4200","referer":"http://localhost:4200/","sec-ch-ua":"\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/checklist/uploadPdf","params":{},"query":{},"rawHeaders":["Host","localhost:3000","Connection","keep-alive","Content-Length","96198","sec-ch-ua","\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\"","Accept","application/json, text/plain, */*","Content-Type","multipart/form-data; boundary=----WebKitFormBoundaryzNARMLtv40sTL4tH","sec-ch-ua-mobile","?0","User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36","sec-ch-ua-platform","\"Windows\"","Origin","http://localhost:4200","Sec-Fetch-Site","same-site","Sec-Fetch-Mode","cors","Sec-Fetch-Dest","empty","Referer","http://localhost:4200/","Accept-Encoding","gzip, deflate, br","Accept-Language","en-US,en;q=0.9"],"rawTrailers":[],"res":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"useChunkedEncodingByDefault":true,"writable":true},"route":{"methods":{"post":true},"path":"/uploadPdf","stack":[{"keys":[],"method":"post","name":"multerMiddleware","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":{"_contentLength":null,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":null,"_headerSent":false,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":false,"locals":{},"outputData":[],"outputSize":0,"req":"[Circular]","sendDate":true,"shouldKeepAlive":true,"socket":"[Circular]","useChunkedEncodingByDefault":true,"writable":true},"_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":null,"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":0,"prefinished":false,"sync":true,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::3000","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/uploadPdf"},"timestamp":"2023-11-27T04:55:55.580Z"}
{"level":"debug","message":"[object Object]response","timestamp":"2023-11-27T04:55:55.587Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T04:57:40.668Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:40.723Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:45.686Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:45.736Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:45.739Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:45.741Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T04:57:45.752Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T04:59:59.613Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T04:59:59.620Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T04:59:59.617Z"}],"status":200},"timestamp":"2023-11-27T05:00:04.186Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T04:59:59.617Z"}],"status":200},"timestamp":"2023-11-27T05:00:12.063Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:00:31.236Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:00:31.266Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:00:31.268Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:00:31.325Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:00:31.327Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T04:59:59.617Z"}],"status":200},"timestamp":"2023-11-27T05:04:01.165Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:07.661Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:07.692Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:07.695Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:07.740Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:07.742Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:40.228Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:40.269Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:40.271Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:40.273Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:04:40.281Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:06:58.105Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T04:59:59.617Z"}],"status":200},"timestamp":"2023-11-27T05:07:03.042Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:07:07.799Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:07:07.870Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:07:07.872Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:07:07.918Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:07:07.920Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:07:20.478Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:07:20.480Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T05:07:24.328Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T05:09:14.120Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:19.279Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:19.323Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:19.324Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:19.370Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:19.375Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:36.065Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:36.145Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:36.149Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:36.214Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:09:36.217Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:05.629Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:05.679Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:05.682Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:05.740Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:05.742Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:58.935Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:58.989Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:58.991Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:59.030Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:11:59.032Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:12:31.115Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:12:31.218Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:12:31.220Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:12:31.286Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:12:31.288Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:10.733Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:16.536Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:20.690Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:20.731Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:20.733Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:20.738Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:13:20.765Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:14:17.596Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:14:17.599Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"wrwer","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:14:17.616Z"}],"status":200},"timestamp":"2023-11-27T05:14:21.925Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"wrwer","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:14:17.616Z"}],"status":200},"timestamp":"2023-11-27T05:14:26.932Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"wrwer","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:14:17.616Z"}],"status":200},"timestamp":"2023-11-27T05:15:12.691Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:15:35.483Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:15:35.525Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:15:35.529Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:15:35.598Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:15:35.600Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:16:59.278Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:16:59.363Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:16:59.366Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:16:59.453Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:16:59.457Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:18:28.312Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:18:28.440Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:18:28.445Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:18:28.560Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:18:28.564Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:20:53.469Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T05:20:53.470Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:20:58.308Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:21:09.316Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:21:26.351Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:21:34.918Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:21:50.552Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:22:52.767Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:22:59.595Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:22:59.623Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:22:59.624Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:22:59.701Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:22:59.703Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:23:04.125Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:23:07.131Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:24:19.679Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T05:24:22.938Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T05:24:22.940Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-27T05:33:25.541Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-27T05:33:25.546Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:33:25.598Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:34:34.779Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:34:37.626Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-27T05:34:43.739Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-27T05:34:43.741Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:34:43.787Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:34:57.866Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-27T05:35:05.975Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-27T05:35:05.977Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T05:35:06.030Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:17:56.035Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:18:57.101Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:19:23.119Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T06:19:26.117Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T06:19:26.118Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T06:53:33.952Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T06:53:33.954Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:53:35.417Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:53:57.316Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:53:58.821Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:05.422Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:29.038Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:29.082Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:29.084Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:29.086Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:54:29.100Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:15.437Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:15.503Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:15.506Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:15.508Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:15.588Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:33.944Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T06:56:42.247Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:02:12.478Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:02:17.763Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:02:17.767Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:32.933Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:35.501Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:35.565Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:35.569Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:35.574Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:08:35.591Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:08:49.130Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:08:49.136Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:08:54.163Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:09:03.645Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:10:01.343Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[{"A1":"1","A2":"3","A3":"4","B":"1","C":"1","D":"1"},{"A1":"2"},{"A1":"3"}],"createdAt":"2023-11-22T11:11:01.567Z","dName":"","footer":[{"F1":"1","F2":"2","F3":"3"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"header1","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","mvalue":"2","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","mvalue":"2023-11-11","permission":"SUPERADMIN"}],"masterName":"MasterTesting","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-22T11:11:01.567Z"}],"status":200},"timestamp":"2023-11-27T07:10:15.247Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:10:23.075Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:10:23.160Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:10:23.163Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:10:23.166Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:10:23.182Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:10:37.482Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:10:37.487Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:11:02.800Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:11:18.978Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:11:29.935Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:11:31.979Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"dwedwdfsda","approval":[],"column":[{"fwefwe":"wewer","fwefwef":"wrre","wefqefwf":"ytrefref","weqfqwfwef":"ewwe"}],"createdAt":"2023-11-23T05:26:32.467Z","dName":"","footer":[{"ewerwer":"erfegeg","gegefgg":"gegtwtgga","qwerwer":"ererg"}],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","mvalue":"wdwedwdwqr","permission":"SUPERADMIN"}],"masterName":"nutttntnfdssaw","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-23T05:26:32.467Z"}],"status":200},"timestamp":"2023-11-27T07:12:13.967Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:20.766Z"}
{"level":"debug","message":{"result":[{"PartId":"P10","Tempname":"dwedwdfsda","approval":[],"column":[{"fwefwe":"wewer","fwefwef":"wrre","wefqefwf":"ytrefref","weqfqwfwef":"ewwe"}],"createdAt":"2023-11-23T05:26:32.467Z","dName":"","footer":[{"ewerwer":"erfegeg","gegefgg":"gegtwtgga","qwerwer":"ererg"}],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","mvalue":"wdwedwdwqr","permission":"SUPERADMIN"}],"masterName":"nutttntnfdssaw","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-23T05:26:32.467Z"}],"status":200},"timestamp":"2023-11-27T07:12:37.995Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:43.031Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:43.102Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:43.105Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:43.123Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:12:43.135Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:12:56.613Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:12:56.617Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:13:08.127Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:13:21.148Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:13:54.909Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:14:10.884Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:14:22.363Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:16:05.921Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:19:27.471Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:22:44.207Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:23:34.583Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:24:03.058Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:24:22.675Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:25:16.783Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:25:28.860Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:26:44.858Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:32:57.328Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:33:01.047Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:33:01.055Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:33:01.058Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:13.002Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:33:15.727Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:33:15.735Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:33:15.738Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:28.198Z"}
{"level":"debug","message":{"result":[{"Tempname":"dfsrffssf","approval":[],"column":[{"iiuyuy":"23322332","sdfw4erfdcv":"qrfwqr","sfsdfsdf":"fqwfwed","ujtyhfgdf":"rfqerferf"}],"createdAt":"2023-11-23T05:31:14.812Z","dName":"","footer":[{"uytyryty":"32wqqwe","ytyryrtyryyyrt":"233232"}],"machineName":"","mainData":[{"mName":"sdfsafsdfadf","mtype":"text","mvalue":"poiuytre","permission":"SUPERADMIN"}],"masterName":"lllllllkkllklkkkk","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-23T05:31:14.812Z"}],"status":200},"timestamp":"2023-11-27T07:33:31.667Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:35.611Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:33:38.357Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:33:38.362Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:33:38.364Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:43.919Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:33:46.768Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:33:46.773Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:33:46.776Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:52.152Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:33:54.733Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:33:54.736Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:33:54.739Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:33:58.129Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:34:00.984Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:34:00.987Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:34:00.989Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:36:47.159Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:36:51.146Z"}
{"level":"debug","message":{"result":[{"Tempname":"dwedwdfsda","approval":[],"column":[],"createdAt":"2023-11-27T07:12:56.626Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"dsdsd","mtype":"text","permission":"SUPERADMIN"}],"masterName":"sSDASDASDA","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:12:56.626Z"}],"status":200},"timestamp":"2023-11-27T07:36:57.146Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T07:37:09.323Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:23.150Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:37:27.892Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:30.489Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:37:42.199Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:47.539Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:47.601Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:47.604Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:47.607Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:37:47.620Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:38:01.838Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T07:38:01.843Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:38:14.477Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:39:11.696Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:39:23.472Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:40:06.452Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:40:47.419Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:40:53.294Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:40:57.706Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:05.366Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:53.257Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:53.340Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:53.343Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:53.346Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:41:53.368Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:43:03.993Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:43:08.229Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:43:08.233Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:43:08.236Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:43:08.239Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:43:12.268Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:43:15.482Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:43:15.487Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:43:15.489Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:43:15.491Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:51:50.494Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:51:53.156Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:51:53.160Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:51:53.162Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:51:53.165Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T07:51:56.643Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T07:52:00.250Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T07:52:00.254Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T07:52:00.262Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T07:52:00.266Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:09:01.625Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T09:09:04.678Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T09:09:04.690Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T09:09:04.692Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T09:09:04.695Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:09:11.852Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T09:09:15.748Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T09:09:15.754Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T09:09:15.759Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T09:09:15.763Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:09:22.734Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:10:38.018Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:10:44.331Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:11:19.491Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T09:11:26.990Z"}
{"level":"debug","message":{"result":[{"Tempname":"TestingTemplate","approval":[],"column":[],"createdAt":"2023-11-27T07:10:37.496Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"H2","mtype":"number","permission":"SUPERADMIN"},{"mName":"H3","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdasdsdsds","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:10:37.496Z"}],"status":200},"timestamp":"2023-11-27T09:11:33.415Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:08:49.161Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"sdadadasd","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:08:49.161Z"}],"status":200},"timestamp":"2023-11-27T09:11:39.289Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"23424","dweddsd":"hygtrfed","ewrwerwer":"ftdrfed","sfsdfsdf":"serthg","wrwerwer":"esrd"}],"createdAt":"2023-11-27T05:14:17.616Z","dName":"","footer":[{"F1":"1223","f2":"rtertert"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"ssd","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"dfgdf","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"454","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-28","permission":"SUPERADMIN"}],"masterName":"checkMaster","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:20:53.476Z"}],"status":200},"timestamp":"2023-11-27T09:11:49.702Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:11:54.933Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T09:12:04.943Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T09:12:33.522Z"}
{"level":"debug","message":{"result":[{"PartId":"P2","Tempname":"checkTempolate","approval":[],"column":[{"":"qw","dweddsd":"ererer","ewrwerwer":"rr","sfsdfsdf":"er","wrwerwer":"ewe"},{"":"qq"},{"":"qw","dweddsd":"w","ewrwerwer":"w","sfsdfsdf":"e","wrwerwer":"q"}],"createdAt":"2023-11-27T04:59:59.617Z","dName":"Quality","footer":[{"F1":"qwwq","f2":"ewewe"}],"machineName":"","mainData":[{"mName":"H1","mtype":"text","mvalue":"fsdf","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","mvalue":"asd","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","mvalue":"123","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","mvalue":"2023-11-07","permission":"SUPERADMIN"}],"masterName":"MasterCheckTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T05:07:20.488Z"}],"status":200},"timestamp":"2023-11-27T09:12:43.371Z"}
{"level":"debug","message":{"result":[{"Tempname":"checkTempolate","approval":[],"column":[],"createdAt":"2023-11-27T07:38:01.866Z","dName":"","footer":[],"machineName":"","mainData":[{"mName":"H1","mtype":"text","permission":"SUPERADMIN"},{"mName":"h2","mtype":"text","permission":"SUPERADMIN"},{"mName":"h3","mtype":"number","permission":"SUPERADMIN"},{"mName":"h4","mtype":"date","permission":"SUPERADMIN"}],"masterName":"wsWSasS","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T07:38:01.866Z"}],"status":200},"timestamp":"2023-11-27T09:12:52.012Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:13:03.019Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:14:18.613Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:18.664Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:22.069Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:22.158Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:22.163Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:22.166Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:14:22.179Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:15:00.480Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:15:00.490Z"}
{"level":"debug","message":{"result":[{"Tempname":"asdddssd","approval":[],"column":[{"asdsd":"trt","dfff":"34","fsfsfsf":"redfcf"}],"createdAt":"2023-11-27T09:15:00.499Z","dName":"","footer":[{"fdfgthryhhg":"hbdxfg","fsdf":"tgcxfgv"}],"machineName":"","mainData":[{"mName":"ddsdfsdf","mtype":"text","mvalue":"erter","permission":"SUPERADMIN"},{"mName":"dsdgvvcsff","mtype":"text","mvalue":"rtrtr","permission":"SUPERADMIN"},{"mName":"vcsdfsdf","mtype":"text","mvalue":"rhfgth","permission":"SUPERADMIN"}],"masterName":"hmetdgdfvgc","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:15:00.499Z"}],"status":200},"timestamp":"2023-11-27T09:15:20.624Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:16:02.205Z"}
{"level":"debug","message":{"result":[{"Tempname":"asdddssd","approval":[],"column":[{"asdsd":"trt","dfff":"34","fsfsfsf":"redfcf"}],"createdAt":"2023-11-27T09:15:00.499Z","dName":"","footer":[{"fdfgthryhhg":"hbdxfg","fsdf":"tgcxfgv"}],"machineName":"","mainData":[{"mName":"ddsdfsdf","mtype":"text","mvalue":"erter","permission":"SUPERADMIN"},{"mName":"dsdgvvcsff","mtype":"text","mvalue":"rtrtr","permission":"SUPERADMIN"},{"mName":"vcsdfsdf","mtype":"text","mvalue":"rhfgth","permission":"SUPERADMIN"}],"masterName":"hmetdgdfvgc","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:15:00.499Z"}],"status":200},"timestamp":"2023-11-27T09:16:05.865Z"}
{"level":"debug","message":{"result":[{"Tempname":"asdddssd","approval":[],"column":[{"asdsd":"trt","dfff":"34","fsfsfsf":"redfcf"}],"createdAt":"2023-11-27T09:15:00.499Z","dName":"","footer":[{"fdfgthryhhg":"hbdxfg","fsdf":"tgcxfgv"}],"machineName":"","mainData":[{"mName":"ddsdfsdf","mtype":"text","mvalue":"erter","permission":"SUPERADMIN"},{"mName":"dsdgvvcsff","mtype":"text","mvalue":"rtrtr","permission":"SUPERADMIN"},{"mName":"vcsdfsdf","mtype":"text","mvalue":"rhfgth","permission":"SUPERADMIN"}],"masterName":"hmetdgdfvgc","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:15:00.499Z"}],"status":200},"timestamp":"2023-11-27T09:18:25.340Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:18:41.964Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:19:31.814Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:20:54.392Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:20:59.626Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:21:13.897Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:14.543Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:19.815Z"}
{"level":"debug","message":{"Tempname":"First Part Approval Information Slip","column":[{"M/C OR FIXTURE BREAKDOWN":"fixture","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"stoppage","TOOL BREAKDOWN":"tool","TOOL CHANGE":"1"},{"TOOL CHANGE":"2"}],"footer":[{"Approved by":"asdf","NOTE: Tool detail (In case of tool change):":"details","Prepared by":"admin","Sign of Prod. Supervisor ":"supervisor","Sign of Shift I/C QA":"shift2"}],"machineName":"","mainData":[{"mName":"DATE ","mtype":"date","mvalue":"2023-11-10","permission":"Admin"},{"mName":"SHIFT","mtype":"number","mvalue":"23","permission":"Admin"},{"mName":"TIME ","mtype":"text","mvalue":"12323","permission":"Admin"},{"mName":"MACHINE ","mtype":"text","mvalue":"3","permission":"Admin"},{"mName":"PART NAME","mtype":"text","mvalue":"1221","permission":"Admin"},{"mName":"OPERATION NO","mtype":"text","mvalue":"OP1","permission":"Admin"}],"masterName":"MasterSlip123","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[]},"timestamp":"2023-11-27T09:22:27.618Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-27T09:22:27.619Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:49.677Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:49.733Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:49.735Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:49.737Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:22:49.756Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:23:47.853Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:23:56.443Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:25:37.868Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:26:26.153Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:26:41.528Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:26:43.973Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:26:51.718Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:26:58.961Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:01.913Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:03.191Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:04.373Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:05.245Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.873Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.875Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.878Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.880Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.890Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:06.893Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:18.476Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:18.524Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:18.526Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:18.528Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:27:18.568Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:03.311Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:03.444Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:03.446Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:03.448Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:03.625Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:56.176Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:56.226Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:56.229Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:56.230Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:28:56.281Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:17.541Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:17.595Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:17.597Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:17.600Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:17.652Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:30:31.853Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:34:52.647Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:34:55.975Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:43:02.399Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:43:36.693Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:43:52.866Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:49:37.014Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:37.050Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:39.321Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:39.368Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:39.372Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:39.389Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:49:39.410Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:51:26.372Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:51:26.376Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:51:29.185Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"NEW CHAIN","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"NO","TOOL BREAKDOWN":"CHAIN RUST","TOOL CHANGE":"CHAIN"},{"TOOL CHANGE":"COUPLING"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:51:26.381Z"}],"status":200},"timestamp":"2023-11-27T09:51:32.766Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:51:37.424Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"NEW CHAIN","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"NO","TOOL BREAKDOWN":"CHAIN RUST","TOOL CHANGE":"CHAIN"},{"TOOL CHANGE":"COUPLING"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:51:26.381Z"}],"status":200},"timestamp":"2023-11-27T09:51:42.916Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"NEW CHAIN","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"NO","TOOL BREAKDOWN":"CHAIN RUST","TOOL CHANGE":"CHAIN"},{"TOOL CHANGE":"COUPLING"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:51:26.381Z"}],"status":200},"timestamp":"2023-11-27T09:53:51.091Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:53:56.022Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:53:56.060Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:53:56.062Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:53:56.092Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:53:56.094Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:54:14.457Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:54:14.461Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"NEW CHAIN","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"NO","TOOL BREAKDOWN":"CHAIN RUST","TOOL CHANGE":"CHAIN"},{"TOOL CHANGE":"COUPLING"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:54:14.474Z"}],"status":200},"timestamp":"2023-11-27T09:54:17.350Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:56:22.183Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:56:22.217Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:56:22.221Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:56:22.243Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:56:22.245Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"NEW CHAIN","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"NO","TOOL BREAKDOWN":"CHAIN RUST","TOOL CHANGE":"CHAIN"},{"TOOL CHANGE":"COUPLING"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:54:14.474Z"}],"status":200},"timestamp":"2023-11-27T09:57:24.618Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:58:15.778Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:58:15.810Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:58:15.811Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:58:15.834Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:58:15.836Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:58:46.868Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:58:46.869Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL BREAKDOWN":"","TOOL CHANGE":""},{"TOOL CHANGE":""}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:58:46.875Z"}],"status":200},"timestamp":"2023-11-27T09:58:50.856Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL BREAKDOWN":"","TOOL CHANGE":""},{"TOOL CHANGE":""}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:58:46.875Z"}],"status":200},"timestamp":"2023-11-27T09:59:12.683Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"","TOOL BREAKDOWN":"","TOOL CHANGE":""},{"TOOL CHANGE":""}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:58:46.875Z"}],"status":200},"timestamp":"2023-11-27T09:59:20.688Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:24.500Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:24.537Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:24.539Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:24.565Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:24.567Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:34.366Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:34.395Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:34.401Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:34.486Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T09:59:34.488Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:59:45.599Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T09:59:45.601Z"}
{"level":"debug","message":{"result":[{"Tempname":"First Part Approval Information Slip1","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"4","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"4","TOOL BREAKDOWN":"23","TOOL CHANGE":"12"},{"TOOL CHANGE":"4"}],"createdAt":"2023-11-27T09:51:26.381Z","dName":"Quality","footer":[{"Approved by: Dinesh ":"4","NOTE: Tool detail (In case of tool change):":"1","Prepared by: Santhosh ":"3","Sign of Prod. Supervisor":"2","Sign of Shift I/C QA":"3"}],"machineName":"","mainData":[{"mName":"DATE","mtype":"date","mvalue":"2023-11-27","permission":"SUPERADMIN"},{"mName":"SHIFT","mtype":"text","mvalue":"1","permission":"SUPERADMIN"},{"mName":"TIME","mtype":"text","mvalue":"12:00","permission":"SUPERADMIN"},{"mName":"MACHINE","mtype":"text","mvalue":"M1","permission":"SUPERADMIN"},{"mName":"PART NAME","mtype":"text","mvalue":"DRTH3456","permission":"SUPERADMIN"},{"mName":"OPERATION NUMBER","mtype":"text","mvalue":"LPOEJRKNFS23","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column)","masterName":"First Part Approval Information Slip1","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T09:59:45.606Z"}],"status":200},"timestamp":"2023-11-27T09:59:52.240Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:04:20.186Z"}
{"level":"debug","message":"userCredentials---------{\"email\":\"administrator@wimerasys.com\",\"password\":\"welcome\"}","timestamp":"2023-11-27T10:09:36.198Z"}
{"level":"debug","message":"0fc4a12f07c3dcda10d88263f305500b@18e2f9b405f82a878ed9519f70c12f52","timestamp":"2023-11-27T10:09:36.201Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:09:36.248Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:13:25.338Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:25.361Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:31.759Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:31.806Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:31.808Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:31.810Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:13:31.820Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:15:12.167Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:15:12.169Z"}
{"level":"debug","message":{"result":[{"Tempname":"Template0121","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"break","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"2","TOOL CHANGE":"Tool"},{"TOOL CHANGE":"Tool2"}],"createdAt":"2023-11-27T10:15:12.172Z","dName":"","footer":[{"NOTE: Tool detail (In case of tool change):":"Note","Sign of Prod":"Supervisor","Sign of Shift I/C QA":"Shift1"},{"NOTE: Tool detail (In case of tool change):":"detail"}],"machineName":"","mainData":[{"mName":"PartId","mtype":"text","mvalue":"1001","permission":"SUPERADMIN"},{"mName":"Shift","mtype":"text","mvalue":"Shift1","permission":"SUPERADMIN"},{"mName":"Machine Id","mtype":"text","mvalue":"M001","permission":"SUPERADMIN"},{"mName":"Time","mtype":"text","mvalue":"12","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master0121","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T10:15:12.172Z"}],"status":200},"timestamp":"2023-11-27T10:15:20.373Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:15:41.678Z"}
{"level":"debug","message":{"result":[{"Tempname":"Template0121","approval":[],"column":[{"M/C OR FIXTURE BREAKDOWN":"break","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"2","TOOL CHANGE":"Tool"},{"TOOL CHANGE":"Tool2"}],"createdAt":"2023-11-27T10:15:12.172Z","dName":"","footer":[{"NOTE: Tool detail (In case of tool change):":"Note","Sign of Prod":"Supervisor","Sign of Shift I/C QA":"Shift1"},{"NOTE: Tool detail (In case of tool change):":"detail"}],"machineName":"","mainData":[{"mName":"PartId","mtype":"text","mvalue":"1001","permission":"SUPERADMIN"},{"mName":"Shift","mtype":"text","mvalue":"Shift1","permission":"SUPERADMIN"},{"mName":"Machine Id","mtype":"text","mvalue":"M001","permission":"SUPERADMIN"},{"mName":"Time","mtype":"text","mvalue":"12","permission":"SUPERADMIN"}],"mainHeader":"REASON FOR FIRST PART APPROVAL (Put tick (√) mark against appropriate column","masterName":"Master0121","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T10:15:12.172Z"}],"status":200},"timestamp":"2023-11-27T10:15:44.634Z"}
{"level":"debug","message":{"Tempname":"Template0121","column":[{"M/C OR FIXTURE BREAKDOWN":"break","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"Stoppage","TOOL BREAKDOWN":"2","TOOL CHANGE":"Tool"},{"M/C OR FIXTURE BREAKDOWN":"4","PRODUCTION STOPPAGE/ CORRECTIVE POWER FAILURE":"power","TOOL BREAKDOWN":"3","TOOL CHANGE":"Tool2"}],"footer":[{"NOTE: Tool detail (In case of tool change):":"Note","Sign of Prod":"Supervisor","Sign of Shift I/C QA":"Shift1"},{"NOTE: Tool detail (In case of tool change):":"detail","Sign of Prod":"Admin","Sign of Shift I/C QA":"Shift2"}],"machineName":"","mainData":[{"mName":"PartId","mtype":"text","mvalue":"1001","permission":"SUPERADMIN"},{"mName":"Shift","mtype":"text","mvalue":"Shift1","permission":"SUPERADMIN"},{"mName":"Machine Id","mtype":"text","mvalue":"M001","permission":"SUPERADMIN"},{"mName":"Time","mtype":"text","mvalue":"12","permission":"SUPERADMIN"}],"masterName":"Master0121","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"submitBool":"true"},"timestamp":"2023-11-27T10:16:16.922Z"}
{"level":"debug","message":"[object Object][object Object]","timestamp":"2023-11-27T10:16:16.924Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:16:36.877Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:27:20.533Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:27:20.558Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:27:27.412Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:27:31.582Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:32:41.561Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:32:51.214Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:33:29.492Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:33:29.542Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:33:29.544Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:33:29.546Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T10:33:29.554Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:39:02.112Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T10:39:02.117Z"}
{"level":"debug","message":{"result":[{"Tempname":"Control Plan","approval":[],"column":[{"":"1","Machine":"M4","No":"2","Process":"P1","Process Name":"M3","Process specification":"P2","Product":"3","Reaction plan":"Plan1","Sample":"M1","control Method":"M2","evaluation":"P3"},{"":"2"}],"createdAt":"2023-11-27T10:39:02.121Z","dName":"","footer":[{"Approved by":"Supervisor","Previewed by":"Admin","Revision Date":"Dtae","Revision Details":"Deatails","Revision No":"R001"}],"machineName":"","mainData":[{"mName":"Part No","mtype":"number","mvalue":"001","permission":"SUPERADMIN"},{"mName":"Part Name","mtype":"text","mvalue":"Part1","permission":"SUPERADMIN"},{"mName":"Suplier Plan","mtype":"text","mvalue":"Plan2","permission":"SUPERADMIN"},{"mName":"Contact","mtype":"number","mvalue":"987644543651","permission":"SUPERADMIN"},{"mName":"Team","mtype":"text","mvalue":"Team1","permission":"SUPERADMIN"},{"mName":"Date","mtype":"date","mvalue":"2023-11-29","permission":"SUPERADMIN"}],"masterName":"MasterTemplate","metadata":[],"plantName":"","shiftName":"","subColsec":[],"subColumns":[],"subMetdata":[],"updatedAt":"2023-11-27T10:39:02.121Z"}],"status":200},"timestamp":"2023-11-27T10:39:18.574Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:12:50.036Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:13:09.075Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:13:09.123Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:13:09.126Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:13:09.148Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:13:09.150Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:15:04.541Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T11:23:23.367Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T12:40:37.985Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:38.037Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:48.843Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:48.891Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:48.893Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:48.900Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:40:48.917Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:44:18.498Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:44:18.638Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:44:18.641Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:44:18.642Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:44:18.694Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:45:18.788Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:45:18.906Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:45:18.909Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:45:18.913Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T12:45:18.962Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:22:10.468Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:22:10.659Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:22:10.661Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:22:10.663Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:22:10.780Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:07.554Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:08.791Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:08.907Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:08.910Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:08.912Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:09.010Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:25:18.787Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }hloo","timestamp":"2023-11-27T13:26:47.078Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:47.117Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:58.975Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:59.032Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:59.033Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:59.035Z"}
{"level":"debug","message":"function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    }schema","timestamp":"2023-11-27T13:26:59.052Z"}
{"level":"debug","message":"D:\\Git projects\\bitBucket\\digitalization\\API\\utils\\logger.js39Debugging info","timestamp":"2023-11-27T16:32:43.021Z"}
{"level":"debug","message":"server is running at 3000","timestamp":"2023-11-27T16:32:43.648Z"}
{"level":"debug","message":"Server Initialized","timestamp":"2023-11-27T16:32:43.648Z"}
{"level":"debug","message":"Database is connected...","timestamp":"2023-11-27T16:32:43.657Z"}
{"level":"debug","message":"SUPERADMIN user exists","timestamp":"2023-11-27T16:32:43.689Z"}
{"level":"debug","message":"SUPERADMIN Role exists","timestamp":"2023-11-27T16:32:43.697Z"}
